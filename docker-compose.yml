version: '3.8'

services:
  # PostgreSQL Database for Blue Team Sport Bar POS
  postgres:
    image: postgres:15-alpine
    container_name: blue_team_pos_db
    environment:
      POSTGRES_USER: blue_team_user
      POSTGRES_PASSWORD: blue_team_password_2024
      POSTGRES_DB: blue_team_pos
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - blue_team_network

  # Redis Cache for Blue Team Sport Bar POS
  redis:
    image: redis:7-alpine
    container_name: blue_team_pos_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - blue_team_network

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: blue_team_pos_server
    environment:
      NODE_ENV: development
      PORT: 8000
      DATABASE_URL: postgresql://blue_team_user:blue_team_password_2024@postgres:5432/blue_team_pos
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key
      STRIPE_WEBHOOK_SECRET: whsec_your_webhook_secret
    ports:
      - "3001:3001"
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - restaurant_network
    command: npm run dev

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: restaurant_pos_client
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_SOCKET_URL: http://localhost:3001
      VITE_STRIPE_PUBLIC_KEY: pk_test_your_stripe_public_key
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - restaurant_network
    command: npm run dev

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: restaurant_pos_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
    networks:
      - restaurant_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  blue_team_network:
    driver: bridge
